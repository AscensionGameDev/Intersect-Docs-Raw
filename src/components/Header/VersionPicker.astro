---
import type { KnownLanguageCode } from "../../i18n";
import type { LabeledVersion, VersionKey } from "../../versioning";

type Props = {
	langCode: KnownLanguageCode;
	version?: VersionKey | undefined;
	versions: readonly LabeledVersion[];
};

const { version = "latest", versions } = Astro.props;
---

<div class="version-picker-wrapper">
	<select class="version-picker">
		{
			versions.map(({ label, value }) => {
				const selected = value === version;
				return (
					<option value={value} selected={selected}>
						{label}
					</option>
				);
			})
		}
	</select>
	<svg
		class="dropdown"
		aria-hidden="true"
		focusable="false"
		role="img"
		fill="currentColor"
		version="1.1"
		xmlns="http://www.w3.org/2000/svg"
		viewBox="0 0 330.00 330.00"
	>
		<path
			d="M325.607,79.393c-5.857-5.857-15.355-5.858-21.213,0.001l-139.39,139.393L25.607,79.393 c-5.857-5.857-15.355-5.858-21.213,0.001c-5.858,5.858-5.858,15.355,0,21.213l150.004,150c2.813,2.813,6.628,4.393,10.606,4.393 s7.794-1.581,10.606-4.394l149.996-150C331.465,94.749,331.465,85.251,325.607,79.393z"
		>
		</path>
	</svg>
</div>

<script>
	import type { VersionKey } from "../../versioning";

	import { listenToEventFromAll } from "../../elements";
	import { getLangCode } from "../../i18n";

	const langCode = getLangCode(window.location.pathname);

	listenToEventFromAll("select.version-picker", "change", ({ target }) => {
		const select = target as HTMLSelectElement;
		if (!select) {
			return;
		}

		const previous = select.getAttribute(
			"__value_previous"
		) as VersionKey | null;
		const value = select.value as VersionKey;
		select.setAttribute("__value_previous", value);

		if (previous === null) {
			return;
		}

		let toReplace: string = previous;
		let replacement: string = value ?? "";
		if (previous === "latest") {
			toReplace = langCode;
			replacement = `${langCode}/${value}`;
		} else if (replacement === "latest") {
			toReplace = `/${toReplace}`;
			replacement = "";
		}

		const newPathname = window.location.pathname.replace(
			toReplace,
			replacement
		);

		window.location.pathname = newPathname;
	});
</script>

<style>
	.version-picker {
		appearance: none;
		background-color: var(--theme-bg);
		border: none;
		border-bottom: 1px solid var(--theme-text-lighter);
		box-sizing: border-box;
		color: var(--theme-text-light);
		cursor: pointer;
		flex-grow: 1;
		font-family: inherit;
		font-size: 1rem;
		-webkit-font-smoothing: antialiased;
		font-weight: 500;
		line-height: inherit;
		margin: 0;
		outline: 0;
		overflow: visible;
		padding: 0.125em 2em;
		padding-left: 0.5em;
		transition-duration: 0.5s;
		transition-property: border-color, color;
		transition-timing-function: ease-out;
		width: 100%;
	}

	.version-picker-wrapper .version-picker:hover,
	.version-picker-wrapper .version-picker:focus {
		border-color: var(--theme-text-light);
		color: var(--theme-text);
	}

	.version-picker-wrapper {
		align-items: center;
		color: var(--theme-text-light);
		display: flex;
		flex-direction: row;
		position: relative;
	}

	.version-picker-wrapper > svg {
		height: 1.25em;
		margin: 0 0.5em;
		pointer-events: none;
		position: absolute;
		width: 1.25em;
		z-index: 9999;
	}

	.version-picker-wrapper svg.dropdown {
		height: 0.75em;
		width: 0.75em;
	}

	.dropdown {
		position: absolute;
		right: 0;
	}

	@media (max-width: 1080px) {
		:global(body:not(.mobile-sidebar-toggle)) .version-picker {
			color: transparent;
			padding: 0.125em 1.125em;
			width: 0;
		}

		:global(body:not(.mobile-sidebar-toggle))
			.version-picker-wrapper
			svg.dropdown {
			display: none;
		}
	}
</style>
