---
import type { KnownLanguageCode } from "../../i18n";
import Intersect from "../Icons/Intersect.astro";
import { getMetadata } from "../../metadata";
import { SITE } from "../../site";
import type { VersionKey } from "../../versioning";

type Props = {
	langCode: KnownLanguageCode;
	version: VersionKey;
};

const { langCode, version } = Astro.props;
const site = SITE[langCode];
const { Search } = site.components;
const metadata = await getMetadata();
---

<template name="site-search">
	<div class="search-container" aria-role="search">
		<section class="modal container">
			<section class="search modal">
				<input
					aria-role="searchbox"
					aria-label="Search"
					autocomplete="off"
					spellcheck="true"
					type="text"
				/>
				<section class="error"></section>
				<section class="loading">
					<slot is:inline name="loading" />
				</section>
				<section class="empty">
					<slot is:inline name="empty-state" />
				</section>
				<section class="results"></section>
			</section>
		</section>
		<button
			class="dummy trigger"
			aria-label={Search.OpenSearch}
			title={Search.OpenSearch}></button>
		<svg>
			<path
				d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"></path>
		</svg>
	</div>

	<style>
		:host {
			font-size: clamp(
				0.875rem,
				0.75rem + 0.375vw + var(--user-font-scale),
				1rem
			);
		}

		.modal.container {
			background-color: rgba(0, 0, 0, 50%);
			bottom: 0;
			display: none;
			flex-direction: column;
			height: 100vh;
			left: 0;
			position: fixed;
			right: 0;
			top: 0;
			width: 100vw;
			z-index: 1000;
		}

		.modal.container.open {
			display: flex;
		}

		svg {
			--search-icon-size: 1.25em;

			color: var(--theme-text);
			fill: none;
			height: var(--search-icon-size);
			pointer-events: none;
			position: absolute;
			right: 1rem;
			width: var(--search-icon-size);
		}

		input {
			background-color: var(--theme-bg);
			border: none;
			border-bottom: calc(max(0.125vmin, 1px)) solid
				var(--theme-text-lighter);
			cursor: text;
			line-height: 2em;
			margin-bottom: 1em;
			outline: none;
			padding: 0.25em 1em;
			position: sticky;
			transition-duration: 0.25s;
			transition-property: border-color;
			transition-timing-function: ease-in-out;
			width: calc(100% - 2em);
		}

		input:hover,
		input:focus {
			border-color: var(--theme-text-light);
		}

		.search-container {
			align-items: center;
			display: flex;
			justify-content: end;
			overflow: visible;
			position: relative;
		}

		.dummy {
			align-items: center;
			background-color: var(--theme-bg);
			border: calc(max(0.125vmin, 1px)) solid var(--theme-text-lighter);
			border-radius: 2em;
			cursor: pointer;
			display: flex;
			flex-direction: column;
			height: 2em;
			justify-content: center;
			line-height: 2em;
			outline: none;
			padding: 0;
			position: relative;
			transition-duration: 0.25s;
			transition-property: border-color, border-radius;
			transition-timing-function: ease-in-out;
			width: 4em;
		}

		.dummy:hover {
			border-radius: 0;
		}

		.dummy:hover,
		.modal.container.open + .dummy {
			border-color: var(--theme-text-light);
		}

		.search-container input:hover,
		.search-container:focus-within input {
			border-radius: 0;
		}

		.search.modal {
			background-color: var(--theme-bg-accent);
			border: 0.125rem solid var(--theme-text-lighter);
			border-radius: 0.5rem;
			display: block;
			flex: 1 1 1px;
			height: calc(100vh - 16rem);
			margin: 8rem auto;
			max-height: calc(100vh - 16rem);
			max-width: 90vw;
			min-width: calc(max(37.5rem, 50vw));
			overflow: hidden;
			padding: 1rem;
			position: relative;
		}

		section.empty,
		section.error,
		section.loading,
		section.results {
			display: none;
		}

		section.empty,
		section.loading {
			flex-direction: column;
		}

		section.empty,
		section.loading,
		section.results {
			align-items: center;
			height: calc(100% - 3em);
			justify-content: center;
			max-height: calc(100% - 3em);
			overflow-y: scroll;
		}

		.has-error section.error,
		.has-results section.results {
			display: initial;
		}

		.empty section.empty,
		.loading section.loading {
			display: flex;
		}

		section.empty ::slotted(*),
		section.loading ::slotted(*) {
			flex: 1;
			width: 100%;
		}

		.results > * {
			color: var(--theme-text-light);
			display: block;
			padding: 0.5em 1em;
			position: relative;
		}

		.results a {
			color: inherit;
		}

		.results strong {
			color: var(--theme-text-accent);
		}

		.results > :nth-child(odd) {
			background-color: var(--theme-bg);
		}

		.modal svg,
		.modal ::slotted(svg) {
			fill: currentColor;
		}
	</style>
</template>

<site-search lang-code={langCode} sha={metadata.sha} version={version} hidden>
	<div slot="loading" class="fill">
		<Intersect animation="inner-spin" />
	</div>
	<div slot="empty-state" class="fill">
		<span class="details">{Search.Empty}</span>
		<Intersect animation="none" />
	</div>
</site-search>

<style>
	.fill,
	.fill > :global(:not(svg)) {
		align-items: center;
		display: flex;
		flex: 1;
		flex-direction: column;
		height: 100%;
		justify-content: center;
		position: relative;
		width: 100%;
	}

	.fill > .details {
		justify-content: flex-start;
		padding-top: 2em;
		position: absolute;
		top: 0;
	}

	.fill :global(svg) {
		height: 62.5%;
		opacity: 0.05;
		width: 62.5%;
	}
</style>

<script>
	import "./Search.SiteSearch";
</script>
