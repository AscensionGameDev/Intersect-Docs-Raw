---
import {
	KnownLanguageCode,
	LANGUAGE_CODES,
	SidebarItem,
	SidebarSection,
} from "../../i18n";
import type { LabeledVersion, VersionKey } from "../../versioning";

import { getCollection } from "astro:content";
import Collapsible from "../Collapsible/Collapsible.astro";
import Chevron from "../Icons/Chevron.astro";
import { SITE } from "../../site";
import { resolveSlug } from "../../slugs";
import VersionPicker from "../Header/VersionPicker.astro";
import LanguagePicker from "../Header/LanguagePicker.astro";
import ThemeToggleButton from "../ThemeToggleButton/ThemeToggleButton";

type Props = {
	currentPage: string;
	langCode: KnownLanguageCode;
	version?: VersionKey | undefined;
	versions: readonly LabeledVersion[];
};

const { currentPage, langCode, version, versions } = Astro.props;

function getSlug() {
	let slug = resolveSlug(langCode, currentPage, version);
	slug = slug.slice(1 + langCode.length);

	if (version && slug.startsWith(`/${version}`)) {
		slug = slug.slice(1 + version.length);
	}

	return slug;
}

const slug = getSlug();
const currentPageMatch = currentPage.endsWith("/")
	? currentPage.slice(1, -1)
	: currentPage.slice(1);

let sidebar = SITE[langCode].sidebar;
if (sidebar && typeof version === "string") {
	const versionedSidebar = sidebar[version];
	if (!Array.isArray(versionedSidebar)) {
		sidebar = versionedSidebar;
	}
}

if (!sidebar) {
	sidebar = {};
}

const sidebarSlug =
	Object.keys(sidebar).find((sectionSlug) => slug.startsWith(sectionSlug)) ??
	"";
const activeSidebar = sidebar[sidebarSlug];

const docs = await getCollection("docs");

function resolveId(partialId: string) {
	return [
		langCode,
		!version || version === "latest" ? "" : `/${version}`,
		partialId.startsWith("/") ? "" : "/",
		partialId,
		partialId.endsWith("/") ? "index.md" : "",
	].join("");
}

function findActiveSidebarItem({
	children,
}: SidebarSection): SidebarItem | undefined {
	for (const child of children) {
		if (typeof child === "string") {
			const entry = docs.find(({ id }) => id === resolveId(child));
			const slug = resolveSlug(langCode, entry?.slug, version);
			if (slug === currentPage) {
				return child;
			}
		} else if ("children" in child) {
			const activeItem = findActiveSidebarItem(child);
			if (activeItem) {
				return activeItem;
			}
		} else {
			if (currentPageMatch == child.link) {
				return child;
			}
		}
	}

	return undefined;
}
---

<aside id="sidebar" class="sidebar" aria-label="Site Navigation">
	<div class="show-on-mobile">
		<ThemeToggleButton client:visible />
		<div class="joined">
			{
				versions.length > 1 && (
					<VersionPicker
						langCode={langCode}
						version={version}
						versions={versions}
					/>
				)
			}
			{
				LANGUAGE_CODES.length > 1 && (
					<LanguagePicker langCode={langCode} />
				)
			}
		</div>
	</div>
	<nav aria-labelledby="sidebar">
		<ul class="nav-groups">
			{
				Array.isArray(activeSidebar) &&
					activeSidebar.map((item) =>
						(async function renderItem(
							item: SidebarItem,
							depth = 0
						) {
							if (typeof item === "string") {
								const itemId = resolveId(item);
								const entry = docs.find(
									({ id }) => id === itemId
								);
								const slug = resolveSlug(
									langCode,
									entry?.slug,
									version
								);
								const pageMatch = slug === currentPage;
								const directoryMatch =
									slug?.includes(currentPage) ?? false;
								const className = [
									"header-link",
									pageMatch ? "page-match" : "",
									directoryMatch ? "directory-match" : "",
								];

								const ariaCurrent = pageMatch
									? "page"
									: undefined;
								return (
									<li class={className.join(" ").trim()}>
										<a
											aria-current={ariaCurrent}
											href={resolveSlug(
												langCode,
												entry?.slug,
												version
											)}
										>
											{entry?.data.title ?? item}
										</a>
									</li>
								);
							}

							if ("children" in item) {
								const { children, collapsible, title } = item;
								const collapsed =
									collapsible === true &&
									findActiveSidebarItem(item) !== undefined;
								const titleClassList = [
									"title",
									`depth-${depth}`,
								];

								return (
									<li class="section">
										<Collapsible
											key={title}
											open={collapsed}
										>
											<div slot="summary" class="summary">
												<span
													class={titleClassList
														.join(" ")
														.trim()}
												>
													{title}
												</span>
												<Chevron
													animated
													direction="right"
												/>
											</div>
											<ul slot="content">
												{children.map((item) =>
													renderItem(item, depth + 1)
												)}
											</ul>
										</Collapsible>
									</li>
								);
							}

							const { link, name, title, type } = item;
							const isCurrentPage =
								currentPageMatch === link ? "page" : false;
							const className = isCurrentPage
								? "current"
								: undefined;

							return (
								<li>
									<a
										aria-current={isCurrentPage}
										class={className}
										href={`${langCode}${link}`}
										id={name}
										type={type}
									>
										{title}
									</a>
								</li>
							);
						})(item)
					)
			}
		</ul>
	</nav>
</aside>

<script is:inline>
	window.addEventListener("DOMContentLoaded", () => {
		var target = document.querySelector('[aria-current="page"]');
		if (target && target.offsetTop > window.innerHeight - 100) {
			document.querySelector(".nav-groups").scrollTop = target.offsetTop;
		}
	});
</script>

<style>
	.sidebar {
		grid-area: sidebar;
		height: fit-content;
		max-height: calc(100vh - var(--theme-navbar-height));
		overflow-y: auto;
		padding: var(--doc-padding) var(--gutter);
		position: sticky;
		top: var(--theme-navbar-height);
		width: 100%;
	}

	.page-match {
		background-color: var(--theme-bg-accent);
		color: var(--theme-text-accent);
		font-weight: 600;
	}

	.summary {
		align-items: center;
		display: flex;
		flex-direction: row;
		font-size: 1.5em;
		font-weight: bold;
		gap: 1rem;
		height: 100%;
		justify-content: space-between;
		list-style-type: none;
		margin-bottom: 1rem;
		padding-right: 0.5rem;
	}

	.summary > .title {
		color: var(--theme-text-light);
		display: inline-block;
		font-size: 1em;
		margin: 0;
	}

	.summary > .title:hover,
	.summary > .title:focus {
		color: var(--theme-text);
	}

	:global(.trigger:checked + .summary) > * :global(svg.chevron) {
		rotate: 0deg;
	}

	.summary > :global(svg.chevron) {
		--chevron-padding: 0.5rem;
		--chevron-size: calc(1rem + 2 * var(--chevron-padding));

		max-height: var(--chevron-size);
		max-width: var(--chevron-size);
		padding: var(--chevron-padding);
	}

	.summary:hover > :global(svg.chevron) {
		background-color: var(--theme-bg-accent);
		border-radius: 100%;
	}

	.section .section {
		font-size: 0.875em;
		margin-top: 1em;
	}

	.section .section > :global(section > .summary > .title) {
		padding-inline-start: 1rem;
	}

	.section .section > :global(section > .content) {
		padding-inline-start: 1.25rem;
	}

	.section .section .summary {
		border-left: 0.25rem solid var(--theme-divider);
		color: inherit;
		line-height: 1.3;
		padding-inline-start: 1rem;
		text-decoration: none;
		unicode-bidi: plaintext;
		width: 100%;
	}

	.section .section .summary:hover,
	.section .section .summary:focus,
	.section .section .summary:focus-within {
		border-inline-start-color: var(--theme-accent-secondary);
	}

	.show-on-mobile {
		align-items: center;
		border-bottom: 1px solid var(--theme-divider);
		display: none;
		flex-direction: column;
		justify-content: center;
		margin-bottom: 2rem;
	}

	:global(body.mobile-sidebar-toggle) .show-on-mobile {
		display: flex;
	}

	.show-on-mobile > .joined {
		align-items: center;
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		margin: 1rem 0;
		width: 100%;
	}

	.show-on-mobile > .joined > :global(*) {
		flex: 1;
	}

	.show-on-mobile > .joined > :global(:not(:last-child)) {
		margin-right: 1rem;
	}

	li:not(.section) {
		font-size: 1rem;
	}

	.nav-groups > li + li {
		margin-top: 1em;
	}

	.nav-group-title {
		font-size: 1rem;
		font-weight: 700;
		margin-bottom: 0.5rem;
		padding: 0.125rem 1rem;
		text-transform: uppercase;
	}

	.nav-link a {
		color: inherit;
		display: block;
		font: inherit;
		font-size: 1rem;
		margin: 1px;
		padding: 0.25rem 1rem;
		text-decoration: none;
	}

	.nav-link a:hover,
	.nav-link a:focus {
		background-color: var(--theme-bg-hover);
	}

	@media (max-width: 1280px) {
		.menu-toggle {
			display: initial;
		}

		aside.sidebar {
			display: none;
		}
	}

	body.mobile-sidebar-toggle aside.sidebar {
		background-color: var(--theme-bg);
		bottom: 0;
		display: block;
		height: calc(100vh - var(--header-height));
		left: 0;
		padding: calc(var(--doc-padding) / 2);
		position: fixed;
		right: 0;
		top: var(--header-height);
		width: 100vw;
		z-index: 1;
	}
</style>

<style is:global>
	:root.theme-dark .nav-link a[aria-current="page"] {
		color: hsla(var(--color-base-white), 100%, 1);
	}
</style>
