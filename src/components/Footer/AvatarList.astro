---
import { SITE } from "../../site";

type Props = {
	pathInRepo: string;
};
const { pathInRepo } = Astro.props;

if (!("repository" in SITE) || SITE.repository.type !== "github") {
	return undefined;
}

const { repository } = SITE;

const url = `https://api.github.com/repos/${repository.name}/commits?path=${pathInRepo}&sha=${repository.branchName}`;
const commitsURL = `https://github.com/${repository.name}/commits/${repository.branchName}/${pathInRepo}`;

type Commit = {
	author: {
		id: string;
		login: string;
	};
};

async function getCommits(url: string) {
	try {
		const token = import.meta.env.GITHUB_TOKEN;
		if (!token) {
			if (import.meta.env.MODE.toLowerCase() === "debug") {
				console.warn(
					"Skipping fetch because `GITHUB_TOKEN` is not set in the .env file at the root of this repository!"
				);
			}
			return [] as Commit[];
		}

		const auth = `Basic ${Buffer.from(token, "binary").toString("base64")}`;

		const res = await fetch(url, {
			method: "GET",
			headers: {
				Authorization: auth,
				"User-Agent": "astro-docs/1.0",
			},
		});

		const data = await res.json();

		if (!res.ok) {
			throw new Error(
				`Request to fetch commits failed. Reason: ${res.statusText}
       Message: ${data.message}`
			);
		}

		return data as Commit[];
	} catch (e) {
		console.warn(`[error]  /src/components/AvatarList.astro
    ${(e as any)?.message ?? e}`);
		return [] as Commit[];
	}
}

function removeDups(arr: Commit[]) {
	const map = new Map<string, Commit["author"]>();

	for (let item of arr) {
		const author = item.author;
		// Deduplicate based on author.id
		map.set(author.id, { login: author.login, id: author.id });
	}

	return [...map.values()];
}

const data = await getCommits(url);
const unique = removeDups(data);
const recentContributors = unique.slice(0, 3); // only show avatars for the 3 most recent contributors
const additionalContributors = unique.length - recentContributors.length; // list the rest of them as # of extra contributors
---

<!-- Thanks to @5t3ph for https://smolcss.dev/#smol-avatar-list! -->{
	unique.length > 0 && (
		<div class="contributors">
			<ul
				class="avatar-list"
				style={`--avatar-count: ${recentContributors.length}`}
			>
				{recentContributors.map((item) => (
					<li>
						<a href={`https://github.com/${item.login}`}>
							<img
								alt={`Contributor ${item.login}`}
								title={`Contributor ${item.login}`}
								width="64"
								height="64"
								src={`https://avatars.githubusercontent.com/u/${item.id}`}
							/>
						</a>
					</li>
				))}
			</ul>
			{additionalContributors > 0 && (
				<span>
					<a
						href={commitsURL}
					>{`and ${additionalContributors} additional contributor${
						additionalContributors > 1 ? "s" : ""
					}.`}</a>
				</span>
			)}
			{unique.length === 0 && <a href={commitsURL}>Contributors</a>}
		</div>
	)
}

<style>
	.avatar-list {
		--avatar-size: 2.5rem;
		--avatar-count: 3;

		display: grid;
		font-size: var(--avatar-size);

		/* Default to displaying most of the avatar to
  enable easier access on touch devices, ensuring
  the WCAG touch target size is met or exceeded */
		grid-template-columns: repeat(
			var(--avatar-count),
			max(2.75rem, calc(var(--avatar-size) / 1.15))
		);
		list-style: none;

		/* `padding` matches added visual dimensions of
  the `box-shadow` to help create a more accurate
  computed component size */
		padding: 0.125em;
	}

	.avatar-list a,
	.avatar-list img {
		border-radius: 50%;
		display: block;
	}

	.avatar-list a {
		transition: transform 180ms ease-in-out;
	}

	.avatar-list a:focus {
		/* Double-layer trick to work for dark and light backgrounds */
		box-shadow: 0 0 0 0.125em var(--theme-accent),
			0 0 0 0.125em rgb(255, 255, 255);
		outline: 0.125rem solid transparent;
	}

	.avatar-list li {
		height: var(--avatar-size);
		width: var(--avatar-size);
	}

	.avatar-list li:hover ~ li a,
	.avatar-list li:focus-within ~ li a {
		transform: translateX(33%);
	}

	.avatar-list img {
		background-color: rgb(255, 255, 255);
		box-shadow: 0 0 0 0 rgb(255, 255, 255), 0 0 0 0.125em rgba(0, 0, 0, 15%);
		height: 100%;
		object-fit: cover;
		width: 100%;
	}

	.contributors {
		align-items: center;
		display: flex;
	}

	.contributors > * + * {
		margin-left: 0.75rem;
	}

	@media (any-hover: hover) and (any-pointer: fine) {
		.avatar-list {
			/* We create 1 extra cell to enable the computed
width to match the final visual width */
			grid-template-columns: repeat(
				calc(var(--avatar-count) + 1),
				calc(var(--avatar-size) / 1.75)
			);
		}
	}
</style>
