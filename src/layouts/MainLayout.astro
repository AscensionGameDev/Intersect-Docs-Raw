---
import type { MarkdownHeading } from "astro";
import type { KnownLanguageCode } from "../i18n";

import { CollectionEntry, getCollection } from "astro:content";
import HeadCommon from "../components/HeadCommon.astro";
import HeadSEO from "../components/HeadSEO.astro";
import Header from "../components/Header/Header.astro";
import PageContent from "../components/PageContent/PageContent.astro";
import LeftSidebar from "../components/LeftSidebar/LeftSidebar.astro";
import RightSidebar from "../components/RightSidebar/RightSidebar.astro";
import Footer from "../components/Footer/Footer.astro";
import { getEditUrl, getPathInRepo, SITE } from "../site";
import SkipToContent from "../components/SkipToContent.astro";
import { getVersion, LabeledVersion, Version, VersionKey } from "../versioning";

type Props = CollectionEntry<"docs">["data"] & {
	headings: MarkdownHeading[];
	langCode: KnownLanguageCode;
	version?: VersionKey | undefined;
};

const { headings, langCode, version, ...data } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const currentPage = Astro.url.pathname;
const site = SITE[langCode];

const docs = await getCollection("docs");

const VERSIONS: readonly LabeledVersion[] = docs
	.reduce((versions: Array<Version>, { id }) => {
		if (!id.includes(langCode)) {
			return versions;
		}

		const version = getVersion(id);
		if (!version) {
			return versions;
		}

		if (versions.includes(version)) {
			return versions;
		}

		versions.push(version);
		return versions;
	}, [])
	.map<LabeledVersion>((version) => ({
		label: version,
		value: version,
	}))
	.concat({
		label: site.components.VersionPicker?.Latest ?? "Latest",
		value: "latest",
	});

const currentSlug = currentPage.replace(/^\/|\/$/g, "");

const searchLangCode = langCode.toLowerCase();
const searchVersion = version?.replaceAll(".", "");

const currentDoc = docs.find(({ slug }) => {
	if (currentSlug === slug) {
		return true;
	}

	const correctedSlugLangCode = slug.replace(searchLangCode, langCode);
	if (currentSlug === correctedSlugLangCode) {
		return true;
	}

	if (!searchVersion || !version || version === "latest") {
		return false;
	}

	const correctedSlug = correctedSlugLangCode.replace(searchVersion, version);
	return currentSlug === correctedSlug;
});
const currentId = currentDoc?.id ?? `${currentSlug.replace(/\/$/, "")}.md`;

const editUrl = getEditUrl(currentId);
const pathInRepo = getPathInRepo(currentId);
---

<html dir={data.dir} lang={data.lang} class="initial">
	<head>
		<HeadCommon />
		<HeadSEO {...data} canonicalUrl={canonicalURL} />
		<title>
			{`${data.title} | ${site.title}`}
		</title>
		<style>
			body {
				--gutter: 0.5rem;
				--doc-padding: 2rem;

				width: 100%;
			}

			.page-wrapper {
				display: grid;
				flex: 1;
				grid-template-columns: 100%;
				grid-template-rows: auto 1fr auto;
				position: relative;
			}

			body.search-open .page-wrapper,
			body.mobile-sidebar-toggle .page-wrapper {
				max-height: 100vh;
				overflow: hidden !important;
			}

			.header-wrapper {
				position: sticky;
				top: 0;
				z-index: var(--z-index-top);
			}

			.content-wrapper {
				display: grid;
				gap: var(--gutter);
				grid-auto-flow: column;
				grid-template-areas: "sidebar main toc";
				grid-template-columns:
					minmax(20rem, 1fr) minmax(0, 3fr)
					minmax(20rem, 1fr);
				height: fit-content;
				margin: 0 auto;
				max-width: 100rem;
				padding: 0 calc(var(--gutter) * 2);
			}

			.footer-wrapper {
				width: 100%;
			}

			@media (max-width: 1280px) {
				.content-wrapper {
					grid-template-areas: "main toc";
					grid-template-columns:
						minmax(0, var(--max-width))
						minmax(var(--gutter), 1fr);
				}
			}

			@media (max-width: 1080px) {
				.content-wrapper {
					grid-template-areas: "main";
					grid-template-columns: minmax(0, var(--max-width));
				}
			}
		</style>
		<style is:global>
			.mobile-sidebar-toggle {
				overflow: hidden;
			}

			.mobile-sidebar-toggle #grid-left {
				display: block;
				top: 2rem;
			}
		</style>
	</head>

	<body>
		<SkipToContent langCode={langCode} />
		<div class="page-wrapper">
			<div class="header-wrapper">
				<Header
					langCode={langCode}
					version={version}
					versions={VERSIONS}
				/>
			</div>
			<div class="content-wrapper">
				<LeftSidebar
					currentPage={currentPage}
					langCode={langCode}
					version={version}
					versions={VERSIONS}
				/>
				<RightSidebar
					editUrl={editUrl}
					headings={headings}
					langCode={langCode}
				/>
				<PageContent
					title={data.title}
					headings={headings}
					editUrl={editUrl}
					langCode={langCode}
				>
					<slot />
				</PageContent>
			</div>
			<div class="footer-wrapper">
				<Footer pathInRepo={pathInRepo} />
			</div>
		</div>
	</body>
</html>
